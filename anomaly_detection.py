# -*- coding: utf-8 -*-
"""Anomaly_Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z877nVSwhwGPIajcSjDDahooLDUpRt5C
"""

import joblib
import pandas as pd
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from sklearn.ensemble import IsolationForest
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import seaborn as sns

# Load the processed dataset
df = pd.read_csv("Processed_Bosch_Dataset.csv")

# Load the scaler from EDA
scaler = joblib.load("scaler.pkl")

# Ensure the same feature set used in EDA & LSTM
features = ["Calibration_Interval_Years", "Months_Remaining", "Days_Since_Last_Calibration", "Days_Until_Next_Calibration"]
df[features] = scaler.transform(df[features])

print("\n Successfully loaded & applied the scaler from EDA!")

# Select relevant features for anomaly detection
anomaly_features = ["Calibration_Interval_Years", "Months_Remaining", "Days_Since_Last_Calibration", "Days_Until_Next_Calibration"]
df_anomaly = df[anomaly_features]

# Train Isolation Forest Model
iso_forest = IsolationForest(n_estimators=100, contamination=0.05, random_state=42)
df["Anomaly_Score"] = iso_forest.fit_predict(df_anomaly)

# Visualize Anomalies
plt.figure(figsize=(10,5))
plt.scatter(df.index, df["Anomaly_Score"], c=df["Anomaly_Score"], cmap="coolwarm")
plt.title("Anomaly Detection in Calibration Data")
plt.xlabel("Tool Index")
plt.ylabel("Anomaly Score")
plt.show()

# Save flagged anomalies
anomalies = df[df["Anomaly_Score"] == -1]
anomalies.to_csv("Detected_Anomalies_Isolation_Forest.csv", index=False)

print("\n Anomaly Detection using Isolation Forest Complete! Overdue tools flagged.")

#Split Data for Autoencoder Training
X_train, X_test = train_test_split(df_anomaly, test_size=0.2, random_state=42)

# Build Autoencoder Model
autoencoder = Sequential([
    Dense(32, activation="relu", input_shape=(len(anomaly_features),)),
    Dropout(0.2),
    Dense(16, activation="relu"),
    Dense(32, activation="relu"),
    Dropout(0.2),
    Dense(len(anomaly_features), activation="linear")
])

# Compile Model
autoencoder.compile(optimizer="adam", loss="mse")

# Train Autoencoder
history = autoencoder.fit(X_train, X_train, validation_data=(X_test, X_test), epochs=50, batch_size=16, verbose=1)

# Plot Training vs Validation Loss
plt.plot(history.history["loss"], label="Training Loss")
plt.plot(history.history["val_loss"], label="Validation Loss")
plt.legend()
plt.title("Autoencoder Training vs Validation Loss")
plt.show()

# Get Reconstruction Error (Higher Error = Anomaly)
reconstruction_errors = ((df_anomaly - autoencoder.predict(df_anomaly))**2).mean(axis=1)
threshold = reconstruction_errors.quantile(0.95)  # Top 5% as anomalies
df["Anomaly_Score_AE"] = (reconstruction_errors > threshold).astype(int)

# Save Autoencoder-Detected Anomalies
df[df["Anomaly_Score_AE"] == 1].to_csv("Detected_Anomalies_Autoencoder.csv", index=False)

# Scatter Plot of Anomalies
plt.figure(figsize=(10,5))
plt.scatter(df.index, df["Anomaly_Score_AE"], c=df["Anomaly_Score_AE"], cmap="coolwarm")
plt.title("Final Anomaly Detection using Autoencoder")
plt.xlabel("Tool Index")
plt.ylabel("Anomaly Score")
plt.show()

# Show detailed information of flagged anomalies
print("\n Autoencoder Detected Anomalies:\n")
print(df[df["Anomaly_Score_AE"] == 1][["Tool_Description", "Days_Since_Last_Calibration", "Days_Until_Next_Calibration", "Months_Remaining"]])

print("\n Autoencoder Anomaly Detection Complete! Overdue tools flagged.")

# Compare Results
anomaly_counts = df[["Anomaly_Score", "Anomaly_Score_AE"]].apply(pd.Series.value_counts)
print("\n Anomaly Counts Comparison:\n", anomaly_counts)

# Visualize Comparison
plt.figure(figsize=(6, 4))
sns.barplot(data=anomaly_counts.T, palette="coolwarm")
plt.title("Comparison of Anomaly Detections (Isolation Forest vs Autoencoder)")
plt.xlabel("Anomaly Detection Method")
plt.ylabel("Number of Anomalies Detected")
plt.xticks(rotation=45)
plt.show()